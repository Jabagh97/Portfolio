// <auto-generated />
using System;
using API.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240410200334_v1.1")]
    partial class v11
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.17");

            modelBuilder.Entity("API.Models.BlogPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DatePublished")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DatePublished");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("API.Models.ContactMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DateSent");

                    b.ToTable("ContactMessages");
                });

            modelBuilder.Entity("API.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GithubUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DateCreated");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "fullstack",
                            DateCreated = new DateTime(2024, 4, 10, 20, 3, 34, 163, DateTimeKind.Utc).AddTicks(4725),
                            Description = "An advanced queue management system developed using the .Net Framework, designed to streamline customer service operations.",
                            GithubUrl = "https://github.com/Jabagh97/QLite",
                            ImageUrl = "/Qlite.jpg",
                            Title = "QLite"
                        },
                        new
                        {
                            Id = 2,
                            Category = "frontend",
                            DateCreated = new DateTime(2024, 4, 10, 20, 3, 34, 163, DateTimeKind.Utc).AddTicks(4727),
                            Description = "This portfolio website is a personal showcase of my work, highlighting my projects and professional capabilities.",
                            GithubUrl = "https://github.com/Jabagh97/Portfolio",
                            ImageUrl = "/port.png",
                            Title = "Personal Portfolio Website"
                        },
                        new
                        {
                            Id = 3,
                            Category = "fullstack",
                            DateCreated = new DateTime(2024, 4, 10, 20, 3, 34, 163, DateTimeKind.Utc).AddTicks(4729),
                            Description = "A riveting multiplayer BattleShip game, deployed on Heroku for seamless online play.",
                            GithubUrl = "https://github.com/Jabagh97/BattleShip",
                            ImageUrl = "/port.png",
                            Title = "BattleShip"
                        },
                        new
                        {
                            Id = 4,
                            Category = "backend",
                            DateCreated = new DateTime(2024, 4, 10, 20, 3, 34, 163, DateTimeKind.Utc).AddTicks(4730),
                            Description = "A backend forum application utilizing Spring Boot, crafted as part of a university assignment.",
                            GithubUrl = "https://github.com/Jabagh97/SpringBootFourm",
                            ImageUrl = "/spring.png",
                            Title = "SpringBoot Forum"
                        },
                        new
                        {
                            Id = 5,
                            Category = "fullstack",
                            DateCreated = new DateTime(2024, 4, 10, 20, 3, 34, 163, DateTimeKind.Utc).AddTicks(4732),
                            Description = "An innovative Task Manager leveraging Jira's API to calculate the effort of selected tasks, built with Spring Boot and Vue.js.",
                            GithubUrl = "https://github.com/Jabagh97/TaskManager",
                            ImageUrl = "/vue.png",
                            Title = "Task Manager"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
